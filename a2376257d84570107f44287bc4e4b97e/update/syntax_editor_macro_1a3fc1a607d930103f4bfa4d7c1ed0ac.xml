<?xml version="1.0" encoding="UTF-8"?><record_update table="syntax_editor_macro">
    <syntax_editor_macro action="INSERT_OR_UPDATE">
        <comments>//Scheduled Script Execution macro from ADF</comments>
        <name>lu</name>
        <sys_class_name>syntax_editor_macro</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-07-15 03:08:08</sys_created_on>
        <sys_id>1a3fc1a607d930103f4bfa4d7c1ed0ac</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>lu</sys_name>
        <sys_package display_value="Loaner Request" source="x_cdltd_loaner_req">a2376257d84570107f44287bc4e4b97e</sys_package>
        <sys_policy/>
        <sys_scope display_value="Loaner Request">a2376257d84570107f44287bc4e4b97e</sys_scope>
        <sys_update_name>syntax_editor_macro_1a3fc1a607d930103f4bfa4d7c1ed0ac</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-07-15 03:08:08</sys_updated_on>
        <text>var LoanerUtils = Class.create();&#13;
LoanerUtils.prototype = {&#13;
  /**********&#13;
   * Initialization stuff here...&#13;
   *&#13;
   **********/&#13;
  initialize : function() {&#13;
    this.overdueRemindTime = gs.getProperty('x_cdltd_loaner_req.overdue.remindtime', 24) * 60 * 60 * 1000;&#13;
    this.pickupLeadTime    = gs.getProperty('x_cdltd_loaner_req.pickup.leadtime', 24) * 60 * 60 * 1000;&#13;
    this.returnRemindTime  = gs.getProperty('x_cdltd_loaner_req.return.remindtime', 24) * 60 * 60 * 1000;&#13;
	  &#13;
	this.appScopeName = gs.getCurrentScopeName();&#13;
	this.loanerTableName = this.appScopeName + '_loaner_request';&#13;
	this.pickupEvent = this.appScopeName + '.pickUp';&#13;
	this.returnEvent = this.appScopeName + '.return';&#13;
	this.remindEvent = this.appScopeName + '.reminder';&#13;
	this.overdueEvent = this.appScopeName + '.overdue';&#13;
  },&#13;
&#13;
  /**********&#13;
   *&#13;
   * getOverdueRequests - retrieve a list of overdue records&#13;
   *&#13;
   * @param - None&#13;
   * @return: array of sys_ids&#13;
   *&#13;
   **********/&#13;
  getOverdueRequests : function() {&#13;
&#13;
    var a = [];&#13;
    var gr = new GlideRecord(this.loanerTableName);&#13;
    &#13;
	var rightNow = new GlideDateTime().getDisplayValue();&#13;
    gr.addQuery('end_date', '&lt;=', rightNow);&#13;
    gr.addQuery('state', 17);&#13;
    gr.query();&#13;
&#13;
    while (gr.next()) {&#13;
      a.push(gr.sys_id.toString());&#13;
    }&#13;
    return a;&#13;
  },&#13;
&#13;
  /**********&#13;
   *&#13;
   * timeToRemindOverdue - Use the passed in ID to check if the record is time to remind again&#13;
   *&#13;
   * @param - id: sys_id of the loaner record to check&#13;
   * @return - boolean: true = time to remind&#13;
   *&#13;
   **********/&#13;
  timeToRemindOverdue : function(id) {&#13;
&#13;
    var gr = new GlideRecord(this.loanerTableName);&#13;
	  &#13;
	  var noticeTime = new GlideDateTime();&#13;
	  var tempDate = noticeTime.add(this.overdueRemindTime) + '';&#13;
&#13;
    if (!gr.get(id)) {&#13;
      gs.log('&gt;&gt;&gt;DEBUG: LoanerUtils: timeToRemindOverdue(): FAILED TO RETRIEVE RECORD');&#13;
      return false;&#13;
    }&#13;
    var baseDate = (gr.last_overdue_reminder == '') ? gr.end_date : gr.last_overdue_reminder;&#13;
&#13;
    return (baseDate &lt;= tempDate) ? true : false;&#13;
  },&#13;
&#13;
  /**********&#13;
   *&#13;
   * sendOverdueReminder - Queue an event to send a reminder and update the necessary&#13;
   *                       record fields to indicate they've been reminded&#13;
   *&#13;
   * @param - id: sys_id of the loaner record to check&#13;
   * @return - None&#13;
   *&#13;
   **********/&#13;
  sendOverdueReminder : function(id) {&#13;
&#13;
    var gr = new GlideRecord(this.loanerTableName);&#13;
&#13;
    if (!gr.get(id)) {&#13;
      gs.log('&gt;&gt;&gt;DEBUG: LoanerUtils: setLastOverdueReminder(): FAILED TO RETRIEVE RECORD');&#13;
      return;&#13;
    }&#13;
    ++gr.overdue_count;&#13;
&#13;
    // Record the last time a reminder was sent&#13;
    gr.last_overdue_reminder = new GlideDateTime().getDisplayValue();&#13;
    gr.update();&#13;
&#13;
    // Send the overdue reminder&#13;
    gs.eventQueue(this.overdueEvent, gr, gr.start_date, gr.end_date);&#13;
  },&#13;
&#13;
  /**********&#13;
   *&#13;
   * getNullPickupReminders - Get a list of records in state 'Ready for Pickup'&#13;
   *                          that haven't been reminded before&#13;
   *&#13;
   * @param - None&#13;
   * @return - array of sys_ids&#13;
   *&#13;
   **********/&#13;
  getNullPickupReminders : function() {&#13;
&#13;
    var a = [];&#13;
    var gr = new GlideRecord(this.loanerTableName);&#13;
	var noticeTime = new GlideDateTime();&#13;
	noticeTime.add(this.pickupLeadTime);&#13;
	&#13;
    gr.addQuery('state', 16);&#13;
    gr.addQuery('pick_up_reminder', '');&#13;
    gr.addQuery('start_date', '&lt;=', noticeTime);&#13;
    gr.query();&#13;
&#13;
    while (gr.next()) {&#13;
      a.push(gr.sys_id.toString());&#13;
    }&#13;
    return a;&#13;
  },&#13;
&#13;
  /**********&#13;
   *&#13;
   * sendPickupReminder - Queue an event to send a reminder and update the pickup reminder field&#13;
   *&#13;
   * @param - id: sys_id of the loaner record to check&#13;
   * @return - None&#13;
   *&#13;
   **********/&#13;
  sendPickupReminder : function(id) {&#13;
&#13;
    var gr = new GlideRecord(this.loanerTableName);&#13;
&#13;
    if (!gr.get(id)) {&#13;
      gs.debug('&gt;&gt;&gt;DEBUG: LoanerUtils: sendPickupReminder(): FAILED TO RETRIEVE RECORD');&#13;
      return;&#13;
    }&#13;
&#13;
    // Log the time the pickup reminder was sent and avoid sending again&#13;
    gr.pick_up_reminder = new GlideDateTime().getDisplayValue();&#13;
    gr.update();&#13;
&#13;
    // Send the pickup reminder&#13;
    gs.eventQueue(this.pickupEvent, gr, gr.start_date, gr.end_date);&#13;
    return;&#13;
  },&#13;
&#13;
  /**********&#13;
   *&#13;
   * getNullReturnReminders - Get a list of records that need reminding to bring their item back&#13;
   *&#13;
   * @param - None&#13;
   * @return - array of sys_ids&#13;
   *&#13;
   **********/&#13;
  getNullReturnReminders : function() {&#13;
&#13;
    var a = [];&#13;
    var gr = new GlideRecord(this.loanerTableName);&#13;
	  &#13;
	var noticeTime = new GlideDateTime();&#13;
	var tempDate = noticeTime.add(this.returnRemindTime) + '';&#13;
&#13;
    gr.addQuery('state', 17);&#13;
    gr.addQuery('return_reminder', '');&#13;
    gr.addQuery('end_date', '&lt;=', tempDate);&#13;
    gr.query();&#13;
&#13;
    while (gr.next()) {&#13;
      a.push(gr.sys_id.toString());&#13;
    }&#13;
    return a;&#13;
  },&#13;
&#13;
  /**********&#13;
   *&#13;
   * setReturnReminder - Queue a return reminder and update field when reminder was sent&#13;
   *&#13;
   * @param - id: sys_id of the loaner record to check&#13;
   * @return - None&#13;
   *&#13;
   **********/&#13;
  sendReturnReminder : function(id) {&#13;
&#13;
    var gr = new GlideRecord(this.loanerTableName);&#13;
&#13;
    if (!gr.get(id)) {&#13;
      gs.debug('&gt;&gt;&gt;DEBUG: LoanerUtils: sendReturnReminder(): FAILED TO RETRIEVE RECORD');&#13;
      return;&#13;
    }&#13;
&#13;
    // Set this record to never remind again&#13;
    gr.return_reminder = new GlideDateTime().getDisplayValue();&#13;
    gr.update();&#13;
&#13;
    // Send the return reminder&#13;
    gs.eventQueue(this.returnEvent, gr, gr.start_date, gr.end_date);&#13;
  },&#13;
&#13;
  type: 'LoanerUtils'&#13;
};</text>
    </syntax_editor_macro>
</record_update>
